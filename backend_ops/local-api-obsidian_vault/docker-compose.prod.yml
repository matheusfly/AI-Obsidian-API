# ðŸš€ PRODUCTION-READY DOCKER COMPOSE
# Optimized for performance, security, and scalability
# Version: 3.0.0 - Production Ready

version: '3.8'

services:
  # Core Vault API Service - Optimized for Production
  vault-api:
    build: 
      context: ./services/vault-api
      dockerfile: Dockerfile.prod
      args:
        - PYTHON_VERSION=3.11
        - UV_VERSION=0.4.0
    container_name: vault-api-prod
    ports:
      - "8080:8080"
    volumes:
      - "./data/vault:/app/data:rw"
      - "./logs/vault-api:/app/logs:rw"
      - "./config/vault-api:/app/config:ro"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
      - TIMEOUT_KEEP_ALIVE=5
      - UV_CACHE_DIR=/app/.uv-cache
      - PYTHONPATH=/app
      - OBSIDIAN_VAULT_PATH=/app/data
      - OBSIDIAN_API_URL=http://obsidian-api:27123
      - POSTGRES_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/vault_db
      - REDIS_URL=redis://redis:6379/0
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      obsidian-api:
        condition: service_healthy

  # Obsidian API Service - Production Optimized
  obsidian-api:
    build:
      context: ./services/obsidian-api
      dockerfile: Dockerfile.prod
    container_name: obsidian-api-prod
    ports:
      - "27123:27123"
    volumes:
      - "${OBSIDIAN_VAULT_PATH}:/vault:rw"
      - "./config/obsidian:/config:ro"
      - "./logs/obsidian-api:/app/logs:rw"
    environment:
      - NODE_ENV=production
      - VAULT_PATH=/vault
      - API_PORT=27123
      - LOG_LEVEL=info
      - MAX_FILE_SIZE=50MB
      - CACHE_TTL=3600
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=100
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:27123/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - "./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro"
      - "./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro"
      - "./logs/postgres:/var/log/postgresql:rw"
    environment:
      - POSTGRES_DB=vault_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vault_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache - Production Optimized
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - "./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro"
      - "./logs/redis:/var/log/redis:rw"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 400mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

  # n8n Workflow Automation - Production Ready
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-prod
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - "./config/n8n:/home/node/.n8n/config:ro"
      - "./logs/n8n:/home/node/.n8n/logs:rw"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_DATABASE_TYPE=postgresdb
      - N8N_DATABASE_POSTGRESDB_HOST=postgres
      - N8N_DATABASE_POSTGRESDB_PORT=5432
      - N8N_DATABASE_POSTGRESDB_DATABASE=n8n
      - N8N_DATABASE_POSTGRESDB_USER=postgres
      - N8N_DATABASE_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_LOG_LEVEL=info
      - N8N_METRICS=true
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_TEMPLATES_ENABLED=false
      - N8N_ONBOARDING_FLOW_DISABLED=true
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      postgres:
        condition: service_healthy

  # ChromaDB Vector Database - Production Optimized
  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb-prod
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
      - "./config/chromadb:/chroma/config:ro"
      - "./logs/chromadb:/chroma/logs:rw"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenConfigServerAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN}
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=X-Chroma-Token
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Ollama AI Service - Production Ready
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-prod
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - "./config/ollama:/root/.ollama/config:ro"
      - "./logs/ollama:/root/.ollama/logs:rw"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_MAX_LOADED_MODELS=3
      - OLLAMA_MAX_QUEUE=512
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Prometheus Monitoring - Production Ready
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - "./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
      - "./config/prometheus/rules:/etc/prometheus/rules:ro"
      - "./logs/prometheus:/var/log/prometheus:rw"
    environment:
      - PROMETHEUS_STORAGE_TSDB_RETENTION_TIME=30d
      - PROMETHEUS_STORAGE_TSDB_RETENTION_SIZE=10GB
      - PROMETHEUS_WEB_ENABLE_LIFE_CYCLE=true
      - PROMETHEUS_WEB_ENABLE_ADMIN_API=true
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Dashboard - Production Ready
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3004:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - "./config/grafana/provisioning:/etc/grafana/provisioning:ro"
      - "./config/grafana/dashboards:/var/lib/grafana/dashboards:ro"
      - "./logs/grafana:/var/log/grafana:rw"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_SERVER_ROOT_URL=http://localhost:3004
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=postgres
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - GF_LOG_LEVEL=info
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_healthy

  # Nginx Reverse Proxy - Production Ready
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./config/nginx/conf.d:/etc/nginx/conf.d:ro"
      - "./config/nginx/ssl:/etc/nginx/ssl:ro"
      - "./logs/nginx:/var/log/nginx:rw"
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
    networks:
      - obsidian-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    depends_on:
      vault-api:
        condition: service_healthy
      obsidian-api:
        condition: service_healthy

# Named Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  chromadb_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  obsidian-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

