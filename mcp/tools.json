{
  "tools": [
    {
      "name": "vault_list",
      "description": "List all files in the Obsidian vault",
      "parameters": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Maximum number of files to return",
            "default": 100
          },
          "recursive": {
            "type": "boolean",
            "description": "Whether to recursively scan subdirectories",
            "default": true
          }
        }
      }
    },
    {
      "name": "file_get",
      "description": "Get content of a specific file from the vault",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the file in the vault"
          }
        },
        "required": ["path"]
      }
    },
    {
      "name": "file_update",
      "description": "Update content of a specific file in the vault",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the file in the vault"
          },
          "content": {
            "type": "string",
            "description": "New content for the file"
          }
        },
        "required": ["path", "content"]
      }
    },
    {
      "name": "file_delete",
      "description": "Delete a specific file from the vault",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to the file to delete"
          }
        },
        "required": ["path"]
      }
    },
    {
      "name": "search_files",
      "description": "Search for files in the vault using advanced algorithms",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results to return",
            "default": 10
          },
          "search_content": {
            "type": "boolean",
            "description": "Whether to search in file content",
            "default": true
          },
          "algorithm": {
            "type": "string",
            "enum": ["bm25", "tfidf", "metadata_boost", "hybrid"],
            "description": "Search algorithm to use",
            "default": "hybrid"
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "get_vault_stats",
      "description": "Get statistics about the vault",
      "parameters": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "health_check",
      "description": "Check the health status of the API",
      "parameters": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "get_commands",
      "description": "Get list of available commands",
      "parameters": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "execute_command",
      "description": "Execute a specific command",
      "parameters": {
        "type": "object",
        "properties": {
          "command_id": {
            "type": "string",
            "description": "ID of the command to execute"
          },
          "parameters": {
            "type": "object",
            "description": "Parameters for the command"
          }
        },
        "required": ["command_id"]
      }
    },
    {
      "name": "assemble_context",
      "description": "Assemble context from search results within token budget",
      "parameters": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "description": "Array of search candidates"
          },
          "query": {
            "type": "string",
            "description": "Original search query"
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens in context",
            "default": 4000
          }
        },
        "required": ["candidates", "query"]
      }
    },
    {
      "name": "deduplicate_results",
      "description": "Remove duplicate results from search candidates",
      "parameters": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "description": "Array of search candidates to deduplicate"
          },
          "similarity_threshold": {
            "type": "number",
            "description": "Similarity threshold for duplicate detection",
            "default": 0.9
          }
        },
        "required": ["candidates"]
      }
    },
    {
      "name": "rank_results",
      "description": "Rank search results using BM25/TF-IDF algorithms",
      "parameters": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "description": "Array of search candidates to rank"
          },
          "query": {
            "type": "string",
            "description": "Search query for ranking"
          },
          "algorithm": {
            "type": "string",
            "enum": ["bm25", "tfidf"],
            "description": "Ranking algorithm to use",
            "default": "bm25"
          }
        },
        "required": ["candidates", "query"]
      }
    },
    {
      "name": "recursive_list",
      "description": "Recursively list all files in the vault with full directory traversal",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Starting path for traversal (empty for root)",
            "default": ""
          },
          "use_cache": {
            "type": "boolean",
            "description": "Whether to use cached results",
            "default": true
          },
          "cache_ttl": {
            "type": "integer",
            "description": "Cache time-to-live in minutes",
            "default": 5
          }
        }
      }
    },
    {
      "name": "advanced_search",
      "description": "Perform advanced local search with fuzzy matching and Portuguese variations",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query"
          },
          "case_sensitive": {
            "type": "boolean",
            "description": "Whether search should be case sensitive",
            "default": false
          },
          "whole_word": {
            "type": "boolean",
            "description": "Whether to match whole words only",
            "default": false
          },
          "regex": {
            "type": "boolean",
            "description": "Whether to treat query as regex pattern",
            "default": false
          },
          "fuzzy": {
            "type": "boolean",
            "description": "Whether to use fuzzy matching",
            "default": true
          },
          "portuguese": {
            "type": "boolean",
            "description": "Whether to use Portuguese language variations",
            "default": true
          },
          "max_results": {
            "type": "integer",
            "description": "Maximum number of results to return",
            "default": 10
          },
          "similarity_threshold": {
            "type": "number",
            "description": "Minimum similarity threshold for fuzzy matching",
            "default": 0.6
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "create_note",
      "description": "Create or update a note using the workaround for POST failures",
      "parameters": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path for the note in the vault"
          },
          "content": {
            "type": "string",
            "description": "Content of the note"
          },
          "force_update": {
            "type": "boolean",
            "description": "Whether to force update if file exists",
            "default": false
          }
        },
        "required": ["path", "content"]
      }
    },
    {
      "name": "execute_command_by_name",
      "description": "Execute a command by name with parameter handling",
      "parameters": {
        "type": "object",
        "properties": {
          "command_name": {
            "type": "string",
            "description": "Name of the command to execute"
          },
          "parameters": {
            "type": "object",
            "description": "Parameters for the command"
          },
          "max_retries": {
            "type": "integer",
            "description": "Maximum number of retries on failure",
            "default": 3
          }
        },
        "required": ["command_name"]
      }
    },
    {
      "name": "full_pipeline",
      "description": "Run the complete context retrieval pipeline with all algorithms",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query"
          },
          "max_results": {
            "type": "integer",
            "description": "Maximum number of results to return",
            "default": 10
          },
          "token_budget": {
            "type": "integer",
            "description": "Maximum tokens for context assembly",
            "default": 4000
          },
          "use_cache": {
            "type": "boolean",
            "description": "Whether to use caching",
            "default": true
          },
          "use_recursive": {
            "type": "boolean",
            "description": "Whether to use recursive traversal",
            "default": true
          },
          "use_advanced_search": {
            "type": "boolean",
            "description": "Whether to use advanced search features",
            "default": true
          },
          "use_ranking": {
            "type": "boolean",
            "description": "Whether to use ranking algorithms",
            "default": true
          },
          "use_deduplication": {
            "type": "boolean",
            "description": "Whether to use deduplication",
            "default": true
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "get_pipeline_stats",
      "description": "Get comprehensive statistics from all pipeline components",
      "parameters": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "enum": ["all", "pipeline", "cache", "traversal", "search", "ranking", "deduplication", "assembly"],
            "description": "Specific component to get stats for",
            "default": "all"
          }
        }
      }
    },
    {
      "name": "clear_cache",
      "description": "Clear all cached data",
      "parameters": {
        "type": "object",
        "properties": {
          "cache_type": {
            "type": "string",
            "enum": ["all", "files", "search", "context"],
            "description": "Type of cache to clear",
            "default": "all"
          }
        }
      }
    }
  ]
}
