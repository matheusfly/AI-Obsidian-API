# 🏗️ **DATA VAULT OBSIDIAN - CURSOR RULES**

**Version:** 3.0.0  
**Last Updated:** September 6, 2025  
**Status:** ✅ **ACTIVE PRODUCTION RULES**

---

## 📋 **PROJECT OVERVIEW**

This is a production-grade, enterprise-ready repository for the Data Vault Obsidian system. The project follows Clean Architecture principles, microservices patterns, and maintains strict file organization standards.

---

## 🏗️ **ARCHITECTURE PRINCIPLES**

### **1. Clean Architecture**
- **Layered Structure:** Clear separation between presentation, application, domain, and infrastructure layers
- **Dependency Inversion:** High-level modules don't depend on low-level modules
- **Single Responsibility:** Each component has one clear purpose
- **Scalable Design:** Architecture supports future growth and evolution

### **2. Microservices Architecture**
- **Service Independence:** Each service can be developed and deployed independently
- **Domain-Driven Design:** Services organized around business domains
- **API-First Design:** Clear service boundaries with well-defined interfaces
- **Event-Driven Communication:** Services communicate through events

### **3. Production Standards**
- **Professional Structure:** Industry-standard folder organization
- **Maintainability:** Easy to maintain and extend
- **Scalability:** Supports horizontal and vertical scaling
- **Documentation:** Comprehensive documentation structure

---

## 📁 **FOLDER STRUCTURE RULES**

### **🎯 ROOT DIRECTORY RULES**
The root directory MUST contain ONLY essential files:

#### **✅ ALLOWED ROOT FILES**
```
📄 .dockerignore              # Docker ignore rules
📄 .env                       # Environment variables
📄 .gitignore                 # Git ignore rules
📄 docker-compose.yml         # Docker orchestration
📄 README.md                  # Main project documentation
📄 requirements-*.txt         # Python dependencies
```

#### **❌ FORBIDDEN ROOT FILES**
- **NO** temporary files in root
- **NO** success reports in root
- **NO** documentation files in root
- **NO** scripts in root
- **NO** test files in root
- **NO** backup files in root

### **📁 MANDATORY FOLDER STRUCTURE**

#### **1. Source Code (Clean Architecture)**
```
📁 src/
├── 📁 presentation/           # Presentation Layer
│   ├── 📁 api/               # REST API endpoints
│   ├── 📁 web/               # Web interfaces
│   └── 📁 cli/               # Command-line interfaces
├── 📁 application/           # Application Layer
│   ├── 📁 use_cases/         # Business use cases
│   ├── 📁 services/          # Application services
│   ├── 📁 dto/               # Data Transfer Objects
│   └── 📁 interfaces/        # Service interfaces
├── 📁 domain/                # Domain Layer
│   ├── 📁 entities/          # Domain entities
│   ├── 📁 value_objects/     # Value objects
│   ├── 📁 repositories/      # Repository interfaces
│   └── 📁 services/          # Domain services
└── 📁 infrastructure/        # Infrastructure Layer
    ├── 📁 persistence/       # Data persistence
    ├── 📁 external/          # External services
    ├── 📁 messaging/         # Message queues and events
    ├── 📁 monitoring/        # Monitoring and observability
    └── 📁 config/            # Configuration management
```

#### **2. Microservices**
```
📁 services/
├── 📁 obsidian-service/      # Obsidian microservice
├── 📁 langgraph-service/     # LangGraph microservice
├── 📁 mcp-service/           # MCP microservice
├── 📁 monitoring-service/    # Monitoring microservice
└── 📁 api-gateway/           # API Gateway service
```

#### **3. Applications**
```
📁 apps/
├── 📁 web-app/               # Web application
├── 📁 studio-app/            # LangGraph Studio app
├── 📁 dashboard-app/         # Monitoring dashboard app
└── 📁 cli-app/               # CLI application
```

#### **4. Infrastructure as Code**
```
📁 infrastructure/
├── 📁 docker/                # Docker configurations
├── 📁 kubernetes/            # Kubernetes manifests
├── 📁 terraform/             # Terraform configurations
└── 📁 monitoring/            # Monitoring configurations
```

#### **5. Testing & Quality**
```
📁 tests/
├── 📁 unit/                  # Unit tests
├── 📁 integration/           # Integration tests
├── 📁 e2e/                   # End-to-end tests
├── 📁 performance/           # Performance tests
└── 📁 fixtures/              # Test fixtures
```

#### **6. Documentation**
```
📁 docs/
├── 📁 architecture/          # Architecture documentation
├── 📁 api/                   # API documentation
├── 📁 deployment/            # Deployment guides
├── 📁 development/           # Development guides
└── 📁 user/                  # User documentation
```

#### **7. Automation & Tools**
```
📁 scripts/
├── 📁 build/                 # Build scripts
├── 📁 deploy/                # Deployment scripts
├── 📁 test/                  # Test scripts
├── 📁 maintenance/           # Maintenance scripts
└── 📁 dev/                   # Development scripts

📁 tools/
├── 📁 linting/               # Linting tools
├── 📁 formatting/            # Code formatting tools
├── 📁 testing/               # Testing tools
└── 📁 monitoring/            # Monitoring tools
```

#### **8. Data & Logs**
```
📁 data/
├── 📁 raw/                   # Raw data
├── 📁 processed/             # Processed data
├── 📁 cache/                 # Cache data
└── 📁 backups/               # Backup data

📁 logs/
├── 📁 application/           # Application logs
├── 📁 system/                # System logs
└── 📁 audit/                 # Audit logs
```

#### **9. Temporary Files**
```
📁 temp/
├── 📁 development/           # Development temp files
├── 📁 testing/               # Testing temp files
└── 📁 build/                 # Build temp files
```

---

## 🧹 **PERSISTENT FILE ORGANIZATION RULES**

### **📋 FILE PLACEMENT RULES**

#### **1. Documentation Files**
- **Success Reports:** `docs/development/success_reports/`
- **Changelogs:** `docs/changelogs/`
- **Architecture Docs:** `docs/architecture/`
- **API Docs:** `docs/api/`
- **User Guides:** `docs/user/`

#### **2. Script Files**
- **Maintenance Scripts:** `scripts/maintenance/`
- **Build Scripts:** `scripts/build/`
- **Deploy Scripts:** `scripts/deploy/`
- **Test Scripts:** `scripts/test/`
- **Dev Scripts:** `scripts/dev/`

#### **3. Configuration Files**
- **Environment Config:** `src/infrastructure/config/`
- **Docker Config:** `infrastructure/docker/`
- **K8s Config:** `infrastructure/kubernetes/`
- **Terraform Config:** `infrastructure/terraform/`

#### **4. Test Files**
- **Unit Tests:** `tests/unit/`
- **Integration Tests:** `tests/integration/`
- **E2E Tests:** `tests/e2e/`
- **Performance Tests:** `tests/performance/`

#### **5. Data Files**
- **Raw Data:** `data/raw/`
- **Processed Data:** `data/processed/`
- **Cache Data:** `data/cache/`
- **Backup Data:** `data/backups/`

---

## 📁 **TEMP FILES SUBFOLDER LOGIC**

### **🎯 TEMP FILES ORGANIZATION**

#### **1. Development Temp Files**
```
📁 temp/development/
├── 📁 active_tests/          # Active testing files
├── 📁 feature_development/   # Feature development files
├── 📁 experimental/          # Experimental files
├── 📁 backup/                # Backup files
└── 📁 generated_scripts/     # Auto-generated scripts
```

#### **2. Testing Temp Files**
```
📁 temp/testing/
├── 📁 test_results/          # Test result files
├── 📁 test_data/             # Test data files
├── 📁 test_logs/             # Test log files
└── 📁 test_reports/          # Test report files
```

#### **3. Build Temp Files**
```
📁 temp/build/
├── 📁 build_artifacts/       # Build artifact files
├── 📁 build_logs/            # Build log files
├── 📁 build_cache/           # Build cache files
└── 📁 build_reports/         # Build report files
```

### **📋 TEMP FILE RULES**

#### **✅ ALLOWED TEMP FILES**
- **Development files** during active development
- **Test files** during testing phases
- **Build files** during build processes
- **Experimental files** for testing new features
- **Backup files** for temporary backups

#### **❌ FORBIDDEN TEMP FILES**
- **NO** permanent files in temp directories
- **NO** source code in temp directories
- **NO** documentation in temp directories
- **NO** configuration files in temp directories

#### **🔄 TEMP FILE LIFECYCLE**
1. **Creation:** Files created in appropriate temp subfolder
2. **Development:** Files used during development/testing
3. **Review:** Files reviewed for permanent placement
4. **Promotion:** Important files moved to permanent locations
5. **Cleanup:** Temporary files cleaned up regularly

---

## 🚀 **AUTOMATION RULES**

### **📋 AUTOMATED CLEANUP**

#### **1. Daily Cleanup**
- **Temp Files:** Clean up old temp files (>7 days)
- **Log Files:** Rotate and compress log files
- **Cache Files:** Clean up expired cache files
- **Backup Files:** Clean up old backup files

#### **2. Weekly Cleanup**
- **Empty Directories:** Remove empty directories
- **Duplicate Files:** Identify and remove duplicates
- **Unused Files:** Identify and archive unused files
- **Documentation:** Update documentation links

#### **3. Monthly Cleanup**
- **Archive Old Reports:** Archive old success reports
- **Update Changelog:** Update changelog index
- **Review Structure:** Review folder structure
- **Optimize Organization:** Optimize file organization

### **📋 MAINTENANCE SCRIPTS**

#### **1. Available Scripts**
- **`final_root_cleanup.ps1`** - Final root folder cleanup
- **`restructure_to_production.ps1`** - Production restructuring
- **`organize_remaining_files.ps1`** - File organization
- **`persistent_file_organization.ps1`** - Persistent organization

#### **2. Script Usage**
```powershell
# Run cleanup with dry run
.\scripts\maintenance\final_root_cleanup.ps1 -DryRun

# Run cleanup with detailed output
.\scripts\maintenance\final_root_cleanup.ps1 -Detailed

# Run persistent organization
.\scripts\maintenance\persistent_file_organization.ps1 -Action organize
```

---

## 📊 **MONITORING RULES**

### **📋 ORGANIZATION MONITORING**

#### **1. File Placement Monitoring**
- **Monitor root directory** for unauthorized files
- **Monitor temp directories** for permanent files
- **Monitor empty directories** for cleanup
- **Monitor file sizes** for optimization

#### **2. Structure Validation**
- **Validate folder structure** against rules
- **Validate file placement** against rules
- **Validate naming conventions** against rules
- **Validate documentation** against rules

#### **3. Cleanup Validation**
- **Validate temp file cleanup** effectiveness
- **Validate backup cleanup** effectiveness
- **Validate log rotation** effectiveness
- **Validate cache cleanup** effectiveness

---

## 🔧 **DEVELOPMENT WORKFLOW RULES**

### **📋 FEATURE DEVELOPMENT**

#### **1. New Feature Development**
1. **Create temp folder** in `temp/development/feature_development/`
2. **Develop feature** in temp folder
3. **Test feature** in temp folder
4. **Review feature** for quality
5. **Move to permanent location** when ready
6. **Clean up temp files** after completion

#### **2. Testing Workflow**
1. **Create test folder** in `temp/testing/`
2. **Run tests** in temp folder
3. **Review test results** in temp folder
4. **Move test files** to permanent location
5. **Clean up temp files** after completion

#### **3. Build Workflow**
1. **Create build folder** in `temp/build/`
2. **Run build process** in temp folder
3. **Review build artifacts** in temp folder
4. **Move artifacts** to permanent location
5. **Clean up temp files** after completion

---

## 📝 **DOCUMENTATION RULES**

### **📋 DOCUMENTATION STANDARDS**

#### **1. Success Reports**
- **Location:** `docs/development/success_reports/`
- **Format:** Markdown with standardized structure
- **Naming:** `[FEATURE]_SUCCESS_REPORT.md`
- **Content:** Detailed achievement documentation

#### **2. Changelogs**
- **Location:** `docs/changelogs/`
- **Format:** Markdown with timeline structure
- **Naming:** `YYYY-MM-DD_[FEATURE].md`
- **Content:** Detailed change documentation

#### **3. Technical Documentation**
- **Location:** `docs/architecture/`, `docs/api/`, etc.
- **Format:** Markdown with technical structure
- **Naming:** `[FEATURE]_[TYPE].md`
- **Content:** Comprehensive technical documentation

---

## 🎯 **ENFORCEMENT RULES**

### **📋 AUTOMATIC ENFORCEMENT**

#### **1. File Placement Enforcement**
- **Monitor root directory** for unauthorized files
- **Automatically move files** to correct locations
- **Generate alerts** for rule violations
- **Log violations** for review

#### **2. Structure Enforcement**
- **Validate folder structure** against rules
- **Create missing directories** automatically
- **Remove empty directories** automatically
- **Update documentation** automatically

#### **3. Cleanup Enforcement**
- **Schedule automatic cleanup** of temp files
- **Schedule automatic cleanup** of log files
- **Schedule automatic cleanup** of cache files
- **Schedule automatic cleanup** of backup files

---

## 🔄 **MAINTENANCE WORKFLOW**

### **📋 REGULAR MAINTENANCE**

#### **1. Daily Maintenance**
- **Run cleanup scripts** for temp files
- **Check file placement** against rules
- **Validate folder structure** against rules
- **Update documentation** as needed

#### **2. Weekly Maintenance**
- **Run comprehensive cleanup** scripts
- **Review file organization** effectiveness
- **Update changelog** with new entries
- **Optimize folder structure** as needed

#### **3. Monthly Maintenance**
- **Archive old reports** and documentation
- **Review organization rules** effectiveness
- **Update automation scripts** as needed
- **Plan structure improvements** for next month

---

## 🎉 **SUCCESS METRICS**

### **📊 ORGANIZATION METRICS**

#### **1. File Organization**
- **Root Directory Cleanliness:** 100% compliance
- **File Placement Accuracy:** 100% compliance
- **Folder Structure Compliance:** 100% compliance
- **Documentation Completeness:** 100% compliance

#### **2. Maintenance Efficiency**
- **Cleanup Automation:** 100% automated
- **File Organization:** 100% automated
- **Structure Validation:** 100% automated
- **Documentation Updates:** 100% automated

#### **3. Development Experience**
- **Navigation Efficiency:** 100% improvement
- **File Discovery:** 100% improvement
- **Maintenance Time:** 90% reduction
- **Team Collaboration:** 100% improvement

---

## 🚨 **VIOLATION HANDLING**

### **📋 RULE VIOLATIONS**

#### **1. File Placement Violations**
- **Detection:** Automatic monitoring
- **Action:** Move file to correct location
- **Notification:** Alert developer
- **Logging:** Record violation for review

#### **2. Structure Violations**
- **Detection:** Automatic validation
- **Action:** Create missing directories
- **Notification:** Alert developer
- **Logging:** Record violation for review

#### **3. Cleanup Violations**
- **Detection:** Automatic monitoring
- **Action:** Clean up violating files
- **Notification:** Alert developer
- **Logging:** Record violation for review

---

## 📞 **SUPPORT AND GUIDANCE**

### **📋 GETTING HELP**

#### **1. Documentation**
- **Project Organization Guide:** `docs/development/PROJECT_ORGANIZATION.md`
- **Architecture Guide:** `docs/architecture/ARCHITECTURE.md`
- **API Documentation:** `docs/api/`
- **User Guides:** `docs/user/`

#### **2. Tools and Scripts**
- **Maintenance Scripts:** `scripts/maintenance/`
- **Build Scripts:** `scripts/build/`
- **Test Scripts:** `scripts/test/`
- **Deploy Scripts:** `scripts/deploy/`

#### **3. Monitoring and Reports**
- **Success Reports:** `docs/development/success_reports/`
- **Changelogs:** `docs/changelogs/`
- **Analysis Reports:** `docs/development/reports/analysis/`
- **Testing Reports:** `docs/development/reports/testing/`

---

## 🎯 **FUTURE ENHANCEMENTS**

### **📊 PLANNED IMPROVEMENTS**

#### **1. Automation Enhancements**
- **AI-Powered Organization:** Intelligent file placement
- **Predictive Cleanup:** Proactive temp file management
- **Smart Monitoring:** Advanced violation detection
- **Automated Documentation:** Auto-generated documentation

#### **2. Structure Improvements**
- **Dynamic Folders:** Auto-created feature folders
- **Smart Categorization:** AI-powered file categorization
- **Advanced Search:** Enhanced file discovery
- **Visual Organization:** Graphical folder structure

#### **3. Integration Enhancements**
- **IDE Integration:** Direct IDE integration
- **CI/CD Integration:** Automated organization in pipelines
- **Team Collaboration:** Enhanced team workflows
- **Real-time Monitoring:** Live organization monitoring

---

**CENTRALIZED REPORTS & CHANGELOG SYSTEM COMPLETE!**

---

*Generated by AI Assistant - Data Vault Obsidian Project*  
*Cursor Rules v3.0.0 - Production-Grade Organization*

