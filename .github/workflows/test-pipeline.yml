name: Comprehensive Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  unit-tests:
    runs-on: windows-latest
    name: Unit Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-html pytest-xdist
        pip install requests asyncio pytest-asyncio
    
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --html=test-reports/unit_report.html --cov=services --cov-report=html:test-reports/unit_coverage.html --cov-report=term
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: test-reports/unit_report.html

  integration-tests:
    runs-on: windows-latest
    name: Integration Tests
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-html requests asyncio pytest-asyncio
    
    - name: Start services
      run: |
        # Start services in background
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/mcp_integration_server.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/http_observability_server.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/mcp_debug_dashboard.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "-m", "langgraph_cli", "dev", "--port", "2024", "--no-browser" -WindowStyle Hidden
        
        # Wait for services to start
        Start-Sleep -Seconds 10
    
    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --html=test-reports/integration_report.html
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-reports/integration_report.html

  e2e-tests:
    runs-on: windows-latest
    name: End-to-End Tests
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-html requests asyncio pytest-asyncio
    
    - name: Start all services
      run: |
        # Start all services
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/mcp_integration_server.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/http_observability_server.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/mcp_debug_dashboard.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "-m", "langgraph_cli", "dev", "--port", "2024", "--no-browser" -WindowStyle Hidden
        
        # Wait for services to start
        Start-Sleep -Seconds 15
    
    - name: Run E2E tests
      run: |
        python -m pytest tests/e2e/ -v --html=test-reports/e2e_report.html
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test-reports/e2e_report.html

  playwright-tests:
    runs-on: windows-latest
    name: Playwright Tests
    needs: e2e-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-html playwright pytest-asyncio
        playwright install chromium
    
    - name: Start services for Playwright
      run: |
        # Start services
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/mcp_integration_server.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/http_observability_server.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/mcp_debug_dashboard.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "-m", "langgraph_cli", "dev", "--port", "2024", "--no-browser" -WindowStyle Hidden
        
        # Wait for services to start
        Start-Sleep -Seconds 15
    
    - name: Run Playwright tests
      run: |
        python -m pytest tests/playwright/ -v --html=test-reports/playwright_report.html
    
    - name: Upload Playwright test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-test-results
        path: test-reports/playwright_report.html

  performance-tests:
    runs-on: windows-latest
    name: Performance Tests
    needs: playwright-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-html requests asyncio pytest-asyncio
    
    - name: Start services
      run: |
        # Start services
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/mcp_integration_server.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/http_observability_server.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "services/mcp-service/src/mcp_tools/mcp_debug_dashboard.py" -WindowStyle Hidden
        Start-Process -FilePath "python" -ArgumentList "-m", "langgraph_cli", "dev", "--port", "2024", "--no-browser" -WindowStyle Hidden
        
        # Wait for services to start
        Start-Sleep -Seconds 15
    
    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ -v --html=test-reports/performance_report.html
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: test-reports/performance_report.html

  test-report:
    runs-on: windows-latest
    name: Generate Test Report
    needs: [unit-tests, integration-tests, e2e-tests, playwright-tests, performance-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-reports
    
    - name: Generate comprehensive report
      run: |
        # Create comprehensive test report
        $reportContent = @"
        <!DOCTYPE html>
        <html>
        <head>
            <title>Comprehensive Test Report - Data Vault Obsidian</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }
                .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                .success { color: green; }
                .warning { color: orange; }
                .error { color: red; }
                .info { color: blue; }
                .timestamp { color: gray; font-size: 0.9em; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>ðŸ§ª Comprehensive Test Report</h1>
                <p class="timestamp">Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>
                <p>Data Vault Obsidian Backend Operations System</p>
            </div>
            
            <div class="section">
                <h2>ðŸ“Š Test Summary</h2>
                <p>This report contains results from all test suites executed in the CI/CD pipeline.</p>
            </div>
            
            <div class="section">
                <h2>ðŸ”— Test Reports</h2>
                <ul>
                    <li><a href="unit_report.html">Unit Tests Report</a></li>
                    <li><a href="integration_report.html">Integration Tests Report</a></li>
                    <li><a href="e2e_report.html">End-to-End Tests Report</a></li>
                    <li><a href="playwright_report.html">Playwright Tests Report</a></li>
                    <li><a href="performance_report.html">Performance Tests Report</a></li>
                </ul>
            </div>
        </body>
        </html>
        "@
        
        $reportContent | Out-File -FilePath "test-reports/comprehensive_report.html" -Encoding UTF8
    
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: test-reports/comprehensive_report.html

  notify:
    runs-on: windows-latest
    name: Notify Results
    needs: [test-report]
    if: always()
    
    steps:
    - name: Notify test completion
      run: |
        Write-Host "All test suites have been executed in the CI/CD pipeline"
        Write-Host "Check the artifacts for detailed test reports"
