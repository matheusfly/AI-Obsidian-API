services:
  # ChromaDB with production settings
  chroma:
    image: chromadb/chroma:latest
    container_name: obsidian-chroma-prod
    ports:
      - "8000:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.providers.HtpasswdConfigServerAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS_FILE=/chroma/auth/htpasswd
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER_TRANSPORT_CREDENTIALS_FILE=/chroma/auth/server.crt
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER_TRANSPORT_CREDENTIALS_KEY_FILE=/chroma/auth/server.key
    volumes:
      - chroma_data:/chroma/chroma
      - ./config/chroma/auth:/chroma/auth
    restart: unless-stopped
    networks:
      - obsidian-prod
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis with production settings
  redis:
    image: redis:7-alpine
    container_name: obsidian-redis-prod
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - obsidian-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Pipeline with production settings
  data-pipeline:
    build:
      context: .
      dockerfile: Dockerfile.data-pipeline
    container_name: obsidian-data-pipeline-prod
    ports:
      - "8003:8003"
      - "8004:8004"
    environment:
      - CHROMA_URL=http://chroma:8000
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - OBSIDIAN_API_KEY=${OBSIDIAN_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - LOG_LEVEL=INFO
      - WORKERS=4
    depends_on:
      - chroma
      - redis
    volumes:
      - ./config:/app/config
      - pipeline_logs:/app/logs
    restart: unless-stopped
    networks:
      - obsidian-prod
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # OpenTelemetry Collector with production settings
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: obsidian-otel-collector-prod
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
      - "13133:13133" # Health check
    command: ["--config=/etc/otelcol-contrib/otel-collector-langsmith.yml"]
    volumes:
      - ./config/otel-collector-langsmith.yml:/etc/otelcol-contrib/otel-collector-langsmith.yml
    environment:
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
    depends_on:
      - data-pipeline
    restart: unless-stopped
    networks:
      - obsidian-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus with production settings
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: obsidian-prometheus-prod
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.config.file=/etc/prometheus/web.yml'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.external-url=http://localhost:9090'
      - '--query.max-concurrency=0'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/rules:/etc/prometheus/rules
      - ./config/prometheus/web.yml:/etc/prometheus/web.yml
      - prometheus_data:/prometheus
    environment:
      - PROMETHEUS_PASSWORD=${PROMETHEUS_PASSWORD}
    restart: unless-stopped
    networks:
      - obsidian-prod
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana with production settings
  grafana:
    image: grafana/grafana:latest
    container_name: obsidian-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
    volumes:
      - ./config/grafana:/etc/grafana
      - ./config/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - obsidian-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: obsidian-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - grafana
      - prometheus
      - data-pipeline
    restart: unless-stopped
    networks:
      - obsidian-prod
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  chroma_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pipeline_logs:
    driver: local

networks:
  obsidian-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

